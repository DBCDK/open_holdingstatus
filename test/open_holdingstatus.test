<?php

/**
 * @file
 * Test case for OpenHldingsStatus localisation & holdings.
 */

class LocalisationRequestTestCase extends DrupalUnitTestCase {

  private  $holdings_ok;
  private  $holdings_ok_result;
  private  $holdings_none;
  private  $holdings_none_result;

  public static function getInfo() {
    return array(
      'name' => t('Open holdingstatus : LocalisationRequest test'),
      'description' => t('Check if parsing a localisationRequest return a valid array of localisations'),
      'group' => t('bibliotek.dk'),
    );
  }

  public function setUp() {
    $this->profile = 'minimum';
    parent::setUp(array('open_holdingstatus'));
  }

  function test_parse_localisationRequest() {
    $file = file_get_contents(drupal_get_path('module', 'open_holdingstatus') . '/test/mockup/holdings_ok.json');
    $this->holdings_ok = json_decode($file);
    $result = _open_holdingstatus_parse_localisationsRequest($this->holdings_ok);
    $this->holdings_ok_result = file_get_contents(drupal_get_path('module', 'open_holdingstatus') . '/test/mockup/holdings_ok.array.php');
    $result = ( serialize($result) == $this->holdings_ok_result );
    $message = 'LocalisationRequest with 16 localisations is parsed correctly';
    $this->assertTrue($result, $message);
  }

  function test_parse_empty_localisationRequest() {
    $file = file_get_contents(drupal_get_path('module', 'open_holdingstatus') . '/test/mockup/holdings_none.json');
    $this->holdings_ok = json_decode($file);
    $result = _open_holdingstatus_parse_localisationsRequest($this->holdings_ok);
    $this->holdings_none_result = file_get_contents(drupal_get_path('module', 'open_holdingstatus') . '/test/mockup/holdings_none.array.php');
    $result = ( serialize($result) == $this->holdings_none_result );
    $message = 'LocalisationRequest with 0 localisations is parsed correctly';
    $this->assertTrue($result, $message);
  }

}